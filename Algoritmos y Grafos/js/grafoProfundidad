let bandera=false

document.addEventListener('DOMContentLoaded',async () => {
     dibujarGrafo(); // Llamar a la función para dibujar el grafo
    let nodoActual = null; // almacenar el nodo actualmente presionado
        svgGrafo.addEventListener('click', async(e) =>  // Evento de clic para iniciar el recorrido BFS desde el nodo presionado
        {   if (!bandera) 
            {   console.log(bandera);
                bandera=true

                if (e.target.classList.contains('txtnodoSpan')) 
                { let nodoPresionado = e.target.textContent;
                  console.log('Se presionó: ', nodoPresionado);
                
                if (nodoActual) { // Restaurar el color original del nodo anteriormente presionado, si lo hay
                    let circleNodoAnterior = document.getElementById(nodoActual);
                    circleNodoAnterior.classList.remove('nodoInicio');
                    circleNodoAnterior.classList.add('no-visitado'); 
                }
                nodoActual = nodoPresionado
                // Cambiar el color del nodo presionado actualmente
                let circleNodoPresionado = document.getElementById(nodoPresionado);
                circleNodoPresionado.classList.remove('no-visitado');
                circleNodoPresionado.classList.add('nodoInicio');
    
                const nodosGrafos = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];
                nodosGrafos.forEach(nodo => {
                    let circle = document.getElementById(nodo)
                    circle.style.fill = ''
                    circle.classList.remove('nodoFin');
                    circle.classList.remove('visitado');
                    circle.classList.remove('nodoFin')
                    circle.classList.add('no-visitado')
                    console.log('Añadiendo la clase "no-visitado" a: ',nodo);
                })
    
                await ejecutarDFS(grafo, nodoPresionado); // aqui espera hasta que BFS termine
                // circleUltimoNodo = document.getElementById(ultimoNodo)
                // circleUltimoNodo.classList.add('nodoFin')
                }
                bandera=false
                console.log(bandera);
            }
               
        });
   
   
});


const svgGrafo = document.getElementById('graphSVG'); // Llamar al contenedor svg

const nodes = { 
    'A': {x: (204.5 + 160) * 1.2, y: 50},
    'B': {x: (104.5 + 160) * 1.2, y: 120},
    'C': {x: (204.5 + 160) * 1.2, y: 140},
    'D': {x: (304.5 + 160) * 1.2, y: 120},
    'E': {x: (4.5 + 160) * 1.2, y: 240},
    'F': {x: (104.5 + 160) * 1.2, y: 240},
    'G': {x: (304.5 + 160) * 1.2, y: 240},
    'H': {x: (404.5 + 160) * 1.2, y: 240},
    'I': {x: 125, y: 320},
    'J': {x: 197.4, y: 320},
    'K': {x: (304.5 + 160) * 1.2, y: 320},
    'L': {x: (304.5 + 160) * 1.2 + 72.4, y: 320}
};

const grafo = { // Representar el grafo en lista de adyacencia (en un objeto)
    'A': ['B','C', 'D'],
    'B': ['A', 'E', 'F'],
    'C': ['A'],
    'D': ['A','G', 'H'],
    'E': ['I', 'J'],
    'F': ['B'],
    'G': ['D','K', 'L'],
    'H': ['D'],
    'I': ['E'],
    'J': ['E'],
    'K': ['G'],
    'L': ['G']
};

function dibujarNodos() { // Función para dibujar los nodos
    for (let nodo in nodes) {
        let coordenadas = nodes[nodo];

        let foreignObj = document.createElementNS("http://www.w3.org/2000/svg", "foreignObject");
            foreignObj.setAttribute("x", coordenadas.x - 20); // Ajustar la posición según el tamaño del círculo y el texto
            foreignObj.setAttribute("y", coordenadas.y - 20);
            foreignObj.setAttribute("width", 40); // Ajustar el ancho y el alto según el tamaño del círculo y el texto
            foreignObj.setAttribute("height", 40);
            foreignObj.classList.add('foreignObj');
            
            // Crear el contenido dentro del foreignObject
            let contenido = `
                <div class="d-flex justify-content-center align-items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" style="border: none;">
                        <circle cx="20" cy="20" r="20" id="${nodo}" class="circle"/>
                    </svg>
                    <span class="txtnodoSpan" style="position: absolute; top: 9px; cursor: pointer;">${nodo}</span>
                </div>
            `;
            foreignObj.innerHTML = contenido;
            svgGrafo.appendChild(foreignObj); // Agregar el foreignObject al SVG
    }
}

function dibujarAristas() { // Función para dibujar las aristas
    for (let nodo in grafo) {
        let nodosAdyacentes = grafo[nodo]; // Obtenemos los nodos adyacentes al nodo actual
        let puntoInicio = nodes[nodo]; // Obtenemos las coordenadas de inicio, del nodo actual del objeto 'nodes' 
        for (let i = 0; i < nodosAdyacentes.length; i++) { // Iteramos sobre cada nodo adyacente del nodo actual
            let nodoAdyacente = nodosAdyacentes[i];
            if (nodoAdyacente !== '') {
                let puntoFinal = nodes[nodoAdyacente]; // Obtenemos las coordenadas del nodo adyacente actual (punto final de la arista)
                let linea = document.createElementNS("http://www.w3.org/2000/svg", "line"); // Crear la línea
                linea.setAttribute("x1", puntoInicio.x); // Añadirle atributos de la línea que se acaba de crear.
                linea.setAttribute("y1", puntoInicio.y); // Coordenadas x1 e y1 para el punto de inicio de la línea (startPoint) 
                linea.setAttribute("x2", puntoFinal.x);
                linea.setAttribute("y2", puntoFinal.y); // Coordenadas x2 e y2 para el punto final de la línea (endPoint).
                linea.classList.add('arista');
                svgGrafo.appendChild(linea); // Mostrarlo en el HTML
            }
        }
    }
}

function dibujarGrafo() { // Función para dibujar el grafo
    dibujarAristas();
    dibujarNodos();
}
// AQUI TERMINAMOS DE DIBUJAR EL GRAFO CON SVG


function sleep(ms) {return new Promise(resolve => setTimeout(resolve, ms));}
   
  async function cambiarColorNodo(nodoId, color) { // Funcion (cambiarColorNodo) para cambiar el color de un nodo en el SVG
    let nodo = document.getElementById(nodoId);
    if (nodo) {
        nodo.classList.add('nodoEnProceso');
        await sleep(800);
        nodo.classList.remove('nodoEnProceso');
        nodo.classList.add('visitado');
        nodo.classList.remove('no-visitado'); // Esto podría ser innecesario si 'visitado' sobrescribe 'no-visitado'
        console.log(`Color cambiado para nodo ${nodoId} a ${color}`);
    } else {
        console.error(`Nodo ${nodoId} no encontrado`);
    }
}


  let ultimoNodo = ''  
async function ejecutarDFS(grafo, nodoInicial) 
{           let visitados = {}; // Objeto para almacenar los nodos visitados
            let pila = [nodoInicial]; // Pila para el recorrido en profundidad
            console.log('*-*-*-Iniciando Recorrido-*-*-*-*');
            // Mientras haya nodos en la pila
            while (pila.length > 0) 
            {   let verticeActual = pila.pop(); // Sacamos el último nodo de la pila
                if (!visitados[verticeActual]) // Si el nodo actual no ha sido visitado
                {   visitados[verticeActual] = true; // Marcamos el nodo como visitado
                    cambiarColorNodo(verticeActual, '#8EEA7A');
                ultimoNodo = verticeActual // al finalizar el ciclo esta variable contendrá el ultimo nodo iterado; el cual se pintará de un color en especifico
                    let adyacentes = grafo[verticeActual]; // Obtenemos los nodos adyacentes al nodo actual
                    adyacentes.forEach(adyacente => { // Agregamos los nodos adyacentes a la pila (si no han sido visitados)
                        if (!visitados[adyacente]) {
                            pila.push(adyacente); // Agregamos los nodos adyacentes a la cola (si no han sido visitados)
                        }
            }); // fin forEach
        } // fin IF principal
        await sleep(1000); 
    } // fin WHILE
        let circleUltimoNodo = document.getElementById(ultimoNodo)
        circleUltimoNodo.classList.remove('visitado')
        circleUltimoNodo.classList.remove('circle')
        circleUltimoNodo.style.fill = '#8a2be2'
        circleUltimoNodo.classList.add('nodoFin')
        console.log('el ultimo nodo en ser iterado es: ', ultimoNodo); 
} 